[
    {
        "uri": "/about",
        "content": "---\ntitle: \"About\"\ndate: 2020-05-06T18:41:26+01:00\nauthorbox: false\nmenu: \n  main:\n    weight: 10\nsidebar: \"right\" # Enable sidebar (on the right side) per page\nwidgets: # Enable sidebar widgets in given order per page\n  \"recent\"\n  \"taglist\"\n  \"categories\"\n---\n\nThis is a demo of how hugo can be used to create a static site containing information about the Technical profession.\n!--more--\nPages are added to the site by adding new name.md files to /content/post. The content consists of a header containing metadata for the page and content written using mark down format. Mark down allows the content to be nicely formatted without being as complex as raw HTML.\n\nThe metadata can include taxonomy information such as what categories the page belongs to or tags. You can attach pages to the main menu and configure whether you want to show a side menu and what content to show in the side menu (e.g. search bar, lists of categories, list of tags)\n\nI've set some categories to appear on the menu bar. If new categories are added to pages as metadata they will be listed on the site under directory /categories/ automatically. Tags are listed automatically on the site under directory /tags/.\n\nI've also set up a custom taxonomy called trainingtypes so that the kind of training (e.g. \"Programming Languages\" or \"Business Technology Fluency\") can have its own listing page. Training types appear on the site under directory /trainingtypes/.\n\nHugo allows themes to control how the content is laid out. This project uses mainroad theme.\n\nIn this demo the hugo project is stored in github and deployed using a guthub site. To test changes locally, install hugo and clone the repo. You can the run the site locally by entering hugo server when in the directory containing the config.toml file (root of the project in this case). \n\n",
        "tags": []
    },
    {
        "uri": "/categories/analysis/_index",
        "content": "---\ntitle: Analysis\ndate: 2014-04-09\nauthorbox: false\nsidebar: false\nmenu: \n  main:\n    weight: 20\n---\n\n",
        "tags": []
    },
    {
        "uri": "/categories/communities/_index",
        "content": "---\ntitle: Communities\ndate: 2014-04-09\nauthorbox: false\nsidebar: false\nmenu: \n  main:\n    weight: 60\n---\n\n",
        "tags": []
    },
    {
        "uri": "/categories/dev/_index",
        "content": "---\ntitle: Dev\ndate: 2014-04-09\nauthorbox: false\nsidebar: false\nmenu: \n  main:\n    weight: 30\n---\n\n",
        "tags": []
    },
    {
        "uri": "/categories/qa/_index",
        "content": "---\ntitle: QA\ndate: 2014-04-09\nauthorbox: false\nsidebar: false\nmenu: \n  main:\n    weight: 40\n---\n\n",
        "tags": []
    },
    {
        "uri": "/categories/skills/_index",
        "content": "---\ntitle: Skills\ndate: 2014-04-09\nauthorbox: false\nsidebar: false\nmenu: \n  main:\n    weight: 50\n---\n\n",
        "tags": []
    },
    {
        "uri": "/categories/training/_index",
        "content": "---\ntitle: Training\ndate: 2014-04-09\nauthorbox: false\nsidebar: false\n---\n\nTo see training by skill type look here.",
        "tags": []
    },
    {
        "uri": "/post/analysis training",
        "content": "---\ntitle: \"Training about analysis\"\ndate: 2020-05-05T20:57:32+01:00\ncategories: [\"Analysis\",\"Training\"]\ntags: [\"Analysis\"]\ntraining_types: [\"Business Technology Fluency\"]\n---\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\n",
        "tags": []
    },
    {
        "uri": "/post/analysis training2",
        "content": "---\ntitle: \"Training about analysis vol2\"\ndate: 2020-05-05T20:57:32+01:00\ncategories: [\"Analysis\",\"Training\"]\ntags: [\"Analysis\"]\ntraining_types: [\"Business Technology Fluency\"]\n---\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\n",
        "tags": []
    },
    {
        "uri": "/post/analysis_stuff",
        "content": "---\ntitle: \"Analysis Stuff\"\ndate: 2020-05-07T14:05:48+01:00\ncategories: \"Analysis\"\nsidebar: \"right\" # Enable sidebar (on the right side) per page\nwidgets: # Enable sidebar widgets in given order per page\n  \"recent\"\n  \"categories\"\n---\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\n!--more--\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\n",
        "tags": []
    },
    {
        "uri": "/post/anotherpost",
        "content": "---\ntitle: \"Anotherpost\"\ndate: 2020-05-05T20:52:30+01:00\ncategories: [\"QA\"]\n---\n\nJust added this post to see what it looks like in default\n",
        "tags": []
    },
    {
        "uri": "/post/basic-elements",
        "content": "---\ntitle: Basic HTML Elements\ndescription: Example test article that contains basic HTML elements for text formatting on the Web.\ndate: 2018-04-16\ncategories:\n  \"Development\"\ntags:\n  \"HTML\"\n  \"CSS\"\n  \"Basic Elements\"\n---\n\nThe main purpose of this article is to make sure that all basic HTML Elements are decorated with CSS so as to not miss any possible elements when creating new themes for Hugo.\n!--more--\n\nHeadings\n\nLet's start with all possible headings. The HTML h1—h6 elements represent six levels of section headings. h1 is the highest section level and h6 is the lowest.\n\n Heading 1\nHeading 2\n Heading 3\nHeading 4\n Heading 5\nHeading 6\n\n***\n\n Paragraph\n\nAccording to the HTML5 specification by W3C, HTML documents consist of a tree of elements and text. Each element is denoted in the source by a start tag, such as body, and an end tag, such as /body. (Certain start tags and end tags can in certain cases be omitted and are implied by other tags.)\n\nElements can have attributes, which control how the elements work. For example, hyperlink are formed using the a element and its href attribute.\n\nList Types\n\n Ordered List\n\nFirst item\nSecond item\nThird item\n\nUnordered List\n\nList item\nAnother item\nAnd another item\n\n Nested list\n\nul\n  liFirst item/li\n  liSecond item\n    ul\n      liSecond item First subitem/li\n      liSecond item second subitem\n        ul\n          liSecond item Second subitem First sub-subitem/li\n          liSecond item Second subitem Second sub-subitem/li\n          liSecond item Second subitem Third sub-subitem/li\n        /ul\n      /li\n      liSecond item Third subitem\n        ol\n          liSecond item Third subitem First sub-subitem/li\n          liSecond item Third subitem Second sub-subitem/li\n          liSecond item Third subitem Third sub-subitem/li\n        /ol\n    /ul\n  /li\n  liThird item/li\n/ul\n\nDefinition List\n\nHTML also supports definition lists.\n\ndl\n  dtBlanco tequila/dt\n  ddThe purest form of the blue agave spirit.../dd\n  dtReposado tequila/dt\n  ddTypically aged in wooden barrels for between two and eleven months.../dd\n/dl\n\n Blockquotes\n\nThe blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\n\n Quoted text.\n This line is part of the same quote.\n Also you can put Markdown into a blockquote.\n\nBlockquote with a citation.\n\nblockquote\n  pMy goal wasn't to make a ton of money. It was to build good computers. I only started the company when I realized I could be an engineer forever./p\n  footer— citeSteve Wozniak/cite/footer\n/blockquote\n\nAccording to Mozilla's website, q cite=\"https://www.mozilla.org/en-US/about/history/details/\"Firefox 1.0 was released in 2004 and became a big success./q\n\nTables\n\nTables aren't part of the core Markdown spec, but Hugo supports them.\n\n| ID  | Make      | Model   | Year |\n| --- | --------- | ------- | ---- |\n| 1   | Honda     | Accord  | 2009 |\n| 2   | Toyota    | Camry   | 2012 |\n| 3   | Hyundai   | Elantra | 2010 |\n\nColons can be used to align columns.\n\n| Tables      | Are           | Cool         |\n|:----------- |:-------------:| ------------:|\n| align: left | align: center | align: right |\n| align: left | align: center | align: right |\n| align: left | align: center | align: right |\n\nYou can also use inline Markdown.\n\n| Inline     | Markdown  | In                | Table      |\n| ---------- | --------- | ----------------- | ---------- |\n| italics  | bold  | strikethrough | code     |\n\n Code\n\n!DOCTYPE html\nhtml lang=\"en\"\nhead\n  meta charset=\"UTF-8\"\n  titleExample HTML5 Document/title\n/head\nbody\n  pTest/p\n/body\n/html\n\n{{ highlight html }}\n!DOCTYPE html\nhtml lang=\"en\"\nhead\n  meta charset=\"UTF-8\"\n  titleExample HTML5 Document/title\n/head\nbody\n  pTest/p\n/body\n/html\n{{ /highlight }}\n\nOther stuff — abbr, sub, sup, kbd, etc.\n\nabbr title=\"Graphics Interchange Format\"GIF/abbr is a bitmap image format.\n\nHsub2/subO\n\nCsub6/subHsub12/subOsub6/sub\n\nXsupn/sup + Ysupn/sup = Zsupn/sup\n\nPress kbdX/kbd to win. Or press kbdkbdCTRL/kbd+kbdALT/kbd+kbdF/kbd/kbd to show FPS counter.\n\nmarkAs a unit of information in information theory, the bit has alternatively been called a shannon/mark, named after Claude Shannon, the founder of field of information theory.\n",
        "tags": []
    },
    {
        "uri": "/post/coding-challenge",
        "content": "---\ntitle: \"Coding challenge community\"\ndate: 2020-05-05T20:57:32+01:00\ncategories: [\"Communities\",\"dev\"]\ntags: [\"Refactoring\"]\n---\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n\n!--more--\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n",
        "tags": []
    },
    {
        "uri": "/post/creating-a-new-theme",
        "content": "---\ntitle: Creating a New Theme\ndate: 2014-09-28\nauthor: Michael Henderson\n---\n\nIntroduction\n\nThis tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I'll explain how Hugo uses templates and how you can organize your templates to create a theme. I won't cover using CSS to style your theme.\n\nWe'll start with creating a new site with a very basic template. Then we'll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\n\nIn this tutorial, commands that you enter will start with the \"$\" prompt. The output will follow. Lines that start with \"\" are comments that I've added to explain a point. When I show updates to a file, the \":wq\" on the last line means to save the file.\n\nHere's an example:\n\nthis is a comment\n$ echo this is a command\nthis is a command\n\n edit the file\n$ vi foo.md\n+++\ndate = \"2014-09-28\"\ntitle = \"creating a new theme\"\n+++\n\nbah and humbug\n:wq\n\nshow it\n$ cat foo.md\n+++\ndate = \"2014-09-28\"\ntitle = \"creating a new theme\"\n+++\n\nbah and humbug\n$\n\n Some Definitions\n\nThere are a few concepts that you need to understand before creating a theme.\n\nSkins\n\nSkins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\n\nYou have two ways to create a skin. The simplest way is to create it in the \nYour second choice is to create it in a sub-directory of the \nThe difference between creating a skin in \nThe rest of this tutorial will call a skin created in the \nNote that you can use this tutorial to create a skin in the \n The Home Page\n\nThe home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\n\nSite Configuration File\n\nWhen Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\n\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your \n Content\n\nContent is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\n\nFront Matter\n\nThe front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\n\nThe information in the front matter is passed into the template before the content is rendered into HTML.\n\n Markdown\n\nContent is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\n\nTemplate Files\n\nHugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it's published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\n\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\n\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\n\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\n\n Single Template\n\nA single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\n\nList Template\n\nA list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\n\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\n\n Partial Template\n\nA partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\n\nCreate a New Site\n\nLet's use Hugo to create a new web site. I'm a Mac user, so I'll create mine in my home directory, in the Sites folder. If you're using Linux, you might have to create the folder first.\n\nThe \"new site\" command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n\n$ hugo new site ~/Sites/zafta\n$ cd ~/Sites/zafta\n$ ls -l\ntotal 8\ndrwxr-xr-x  7 quoha  staff  238 Sep 29 16:49 .\ndrwxr-xr-x  3 quoha  staff  102 Sep 29 16:49 ..\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes\n-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static\n$\n\nTake a look in the content/ directory to confirm that it is empty.\n\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That's a topic for a different tutorial, so please ignore them for now.\n\n Generate the HTML For the New Site\n\nRunning the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that's everything that's not content). Since we have an empty site, it won't do much, but it will do it very quickly.\n\n$ hugo --verbose\nINFO: 2014/09/29 Using config file: config.toml\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\nWARN: 2014/09/29 Unable to locate layout: [404.html]\n0 draft content\n0 future content\n0 pages created\n0 tags created\n0 categories created\nin 2 ms\n$\n\nThe \"--verbose\" flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \"INFO:\" or \"WARN:\" is present because we used that flag. The lines that start with \"WARN:\" are warning messages. We'll go over them later.\n\nWe can verify that the command worked by looking at the directory again.\n\n$ ls -l\ntotal 8\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes\n-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts\ndrwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static\n$\n\nSee that new public/ directory? Hugo placed all generated content there. When you're ready to publish your web site, that's the place to start. For now, though, let's just confirm that we have what we'd expect from a site with no content.\n\n$ ls -l public\ntotal 16\n-rw-r--r--  1 quoha  staff  416 Sep 29 17:02 index.xml\n-rw-r--r--  1 quoha  staff  262 Sep 29 17:02 sitemap.xml\n$\n\nHugo created two XML files, which is standard, but there are no HTML files.\n\nTest the New Site\n\nVerify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \"server\" command. If it is successful, you will see output similar to the following:\n\n$ hugo server --verbose\nINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\nWARN: 2014/09/29 Unable to locate layout: [404.html]\n0 draft content\n0 future content\n0 pages created\n0 tags created\n0 categories created\nin 2 ms\nServing pages from /Users/quoha/Sites/zafta/public\nWeb Server is available at http://localhost:1313\nPress Ctrl+C to stop\n\nConnect to the listed URL (it's on the line that starts with \"Web Server\"). If everything is working correctly, you should get a page that shows the following:\n\nindex.xml\nsitemap.xml\n\nThat's a listing of your public/ directory. Hugo didn't create a home page because our site has no content. When there's no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\n\nLet’s go back and look at those warnings again.\n\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\nWARN: 2014/09/29 Unable to locate layout: [404.html]\n\nThat second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\n\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\n\nI like that the verbose flag causes Hugo to list the files that it's searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we'll cover later that explain the names and paths. For now, just remember that Hugo couldn't find a template for the home page and it told you so.\n\nAt this point, you've got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\n\n Create a New Theme\n\nHugo doesn't ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\n\nWe're going to create a new theme called \"zafta.\" Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\n\nAll themes have opinions on content and layout. For example, Zafta uses \"post\" over \"blog\". Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\n\nCreate a Skeleton\n\nUse the hugo \"new\" command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n\n$ hugo new theme zafta\n\n$ ls -l\ntotal 8\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes\n-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts\ndrwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static\ndrwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes\n\n$ find themes -type f | xargs ls -l\n-rw-r--r--  1 quoha  staff  1081 Sep 29 17:31 themes/zafta/LICENSE.md\n-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/archetypes/default.md\n-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\n-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/_default/single.html\n-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/index.html\n-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html\n-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/partials/header.html\n-rw-r--r--  1 quoha  staff    93 Sep 29 17:31 themes/zafta/theme.toml\n$\n\nThe skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\n\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They're optional, but if you're going to be distributing your theme, it tells the world who to praise (or blame). It's also nice to declare the license so that people will know how they can use the theme.\n\n$ vi themes/zafta/theme.toml\nauthor = \"michael d henderson\"\ndescription = \"a minimal working template\"\nlicense = \"MIT\"\nname = \"zafta\"\nsource_repo = \"\"\ntags = [\"tags\", \"categories\"]\n:wq\n\n also edit themes/zafta/LICENSE.md and change\nthe bit that says \"YOURNAMEHERE\"\n\nNote that the the skeleton's template files are empty. Don't worry, we'll be changing that shortly.\n\n$ find themes/zafta -name '*.html' | xargs ls -l\n-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\n-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/single.html\n-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/index.html\n-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html\n-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/header.html\n$\n\n Update the Configuration File to Use the Theme\n\nNow that we've got a theme to work with, it's a good idea to add the theme name to the configuration file. This is optional, because you can always add \"-t zafta\" on all your commands. I like to put it the configuration file because I like shorter command lines. If you don't put it in the configuration file or specify it on the command line, you won't use the template that you're expecting to.\n\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n\n$ vi config.toml\ntheme = \"zafta\"\nbaseurl = \"\"\nlanguageCode = \"en-us\"\ntitle = \"zafta - totally refreshing\"\nMetaDataFormat = \"toml\"\n:wq\n\n$\n\nGenerate the Site\n\nNow that we have an empty theme, let's generate the site again.\n\n$ hugo --verbose\nINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\nWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\n0 draft content\n0 future content\n0 pages created\n0 tags created\n0 categories created\nin 2 ms\n$\n\nDid you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme's directory.\n\nLet's check the public/ directory to see what Hugo's created.\n\n$ ls -l public\ntotal 16\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 css\n-rw-r--r--  1 quoha  staff    0 Sep 29 17:56 index.html\n-rw-r--r--  1 quoha  staff  407 Sep 29 17:56 index.xml\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 js\n-rw-r--r--  1 quoha  staff  243 Sep 29 17:56 sitemap.xml\n$\n\nNotice four things:\n\nHugo created a home page. This is the file public/index.html.\nHugo created a css/ directory.\nHugo created a js/ directory.\nHugo claimed that it created 0 pages. It created a file and copied over static files, but didn't create any pages. That's because it considers a \"page\" to be a file created directly from a content file. It doesn't count things like the index.html files that it creates automatically.\n\n The Home Page\n\nHugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo's warning message shows that it looks for three different templates:\n\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\n\nIf it can't find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\n\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n\n$ find . -name index.html | xargs ls -l\n-rw-r--r--  1 quoha  staff  0 Sep 29 20:21 ./public/index.html\n-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 ./themes/zafta/layouts/index.html\n$\n\nThe Magic of Static\n\nHugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\n\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo's opinion is that you'll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don't like that, you can change the directory names in your theme directory or even delete them completely. Hugo's nice enough to offer its opinion, then behave nicely if you disagree.\n\n$ find themes/zafta -type d | xargs ls -ld\ndrwxr-xr-x  7 quoha  staff  238 Sep 29 17:38 themes/zafta\ndrwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes/zafta/archetypes\ndrwxr-xr-x  5 quoha  staff  170 Sep 29 17:31 themes/zafta/layouts\ndrwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/layouts/_default\ndrwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/layouts/partials\ndrwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/static\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes/zafta/static/css\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes/zafta/static/js\n$\n\n The Theme Development Cycle\n\nWhen you're working on a theme, you will make changes in the theme's directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n\nPurge the public/ directory.\nRun the built in web server in watch mode.\nOpen your site in a browser.\nUpdate the theme.\nGlance at your browser window to see changes.\nReturn to step 4.\n\nI’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\n\nCheck the main Hugo site for information on using Git with Hugo.\n\nPurge the public/ Directory\n\nWhen generating the site, Hugo will create new files and update existing ones in the \nNote: If you're building on an SSD, you should ignore this. Churning on a SSD can be costly.\n\n Hugo's Watch Option\n\nHugo's \"--watch\" option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\n\nLive Reload\n\nHugo's built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \"Wow, that's totally amazing.\"\n\n Development Commands\n\nUse the following commands as the basis for your workflow.\n\npurge old files. hugo will recreate the public directory.\n\n$ rm -rf public\n run hugo in watch mode\n$ hugo server --watch --verbose\n\nHere's sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I've said this before, it's amazing.\n\n$ rm -rf public\n$ hugo server --watch --verbose\nINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\nWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\n0 draft content\n0 future content\n0 pages created\n0 tags created\n0 categories created\nin 2 ms\nWatching for changes in /Users/quoha/Sites/zafta/content\nServing pages from /Users/quoha/Sites/zafta/public\nWeb Server is available at http://localhost:1313\nPress Ctrl+C to stop\nINFO: 2014/09/29 File System Event: [\"/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\": MODIFY|ATTRIB]\nChange detected, rebuilding site\n\nWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\n0 draft content\n0 future content\n0 pages created\n0 tags created\n0 categories created\nin 1 ms\n\n Update the Home Page Template\n\nThe home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme's layout/ directory:\n\nindex.html\n_default/list.html\n_default/single.html\n\nWe could update one of the default templates, but a good design decision is to update the most specific template available. That's not a hard and fast rule (in fact, we'll break it a few times in this tutorial), but it is a good generalization.\n\nMake a Static Home Page\n\nRight now, that page is empty because we don't have any content and we don't have any logic in the template. Let's change that by adding some text to the template.\n\n$ vi themes/zafta/layouts/index.html\n!DOCTYPE html\nhtml\nbody\n  phugo says hello!/p\n/body\n/html\n:wq\n\n$\n\nBuild the web site and then verify the results.\n\n$ hugo --verbose\nINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\nWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\n0 draft content\n0 future content\n0 pages created\n0 tags created\n0 categories created\nin 2 ms\n\n$ find public -type f -name '*.html' | xargs ls -l\n-rw-r--r--  1 quoha  staff  78 Sep 29 21:26 public/index.html\n\n$ cat public/index.html\n!DOCTYPE html\nhtml\nbody\n  phugo says hello!/p\n/html\n\n Live Reload\n\nNote: If you're running the server with the --watch option, you'll see different content in the file:\n\n$ cat public/index.html\n!DOCTYPE html\nhtml\nbody\n  phugo says hello!/p\nscriptdocument.write('<script src=\"http://'\n        (location.host || 'localhost').split(':')[0]\n    ':1313/livereload.js?mindelay=10\"</'\n        'script')/script/body\n/html\n\nWhen you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\n\nBuild a \"Dynamic\" Home Page\n\n\"Dynamic home page?\" Hugo's a static web site generator, so this seems an odd thing to say. I mean let's have the home page automatically reflect the content in the site every time Hugo builds it. We'll use iteration in the template to do that.\n\n Create New Posts\n\nNow that we have the home page generating static content, let's add some content to the site. We'll display these posts as a list on the home page and on their own page, too.\n\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n\n$ hugo --verbose new post/first.md\nINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\nINFO: 2014/09/29 attempting to create  post/first.md of post\nINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md\nERROR: 2014/09/29 Unable to Cast nil to map[string]interface{}\n\n$\n\nThat wasn't very nice, was it?\n\nThe \"new\" command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there's a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n\n$ vi themes/zafta/archetypes/post.md\n+++\nDescription = \"\"\nTags = []\nCategories = []\n+++\n:wq\n\n$ find themes/zafta/archetypes -type f | xargs ls -l\n-rw-r--r--  1 quoha  staff   0 Sep 29 21:53 themes/zafta/archetypes/default.md\n-rw-r--r--  1 quoha  staff  51 Sep 29 21:54 themes/zafta/archetypes/post.md\n\n$ hugo --verbose new post/first.md\nINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\nINFO: 2014/09/29 attempting to create  post/first.md of post\nINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md\nINFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md\n/Users/quoha/Sites/zafta/content/post/first.md created\n\n$ hugo --verbose new post/second.md\nINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\nINFO: 2014/09/29 attempting to create  post/second.md of post\nINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md\nINFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md\n/Users/quoha/Sites/zafta/content/post/second.md created\n\n$ ls -l content/post\ntotal 16\n-rw-r--r--  1 quoha  staff  104 Sep 29 21:54 first.md\n-rw-r--r--  1 quoha  staff  105 Sep 29 21:57 second.md\n\n$ cat content/post/first.md\n+++\nCategories = []\nDescription = \"\"\nTags = []\ndate = \"2014-09-29T21:54:53-05:00\"\ntitle = \"first\"\n\n+++\nmy first post\n\n$ cat content/post/second.md\n+++\nCategories = []\nDescription = \"\"\nTags = []\ndate = \"2014-09-29T21:57:09-05:00\"\ntitle = \"second\"\n\n+++\nmy second post\n\n$\n\nBuild the web site and then verify the results.\n\n$ rm -rf public\n$ hugo --verbose\nINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\nINFO: 2014/09/29 found taxonomies: map[string]string{\"category\":\"categories\", \"tag\":\"tags\"}\nWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\n0 draft content\n0 future content\n2 pages created\n0 tags created\n0 categories created\nin 4 ms\n$\n\nThe output says that it created 2 pages. Those are our new posts:\n\n$ find public -type f -name '*.html' | xargs ls -l\n-rw-r--r--  1 quoha  staff  78 Sep 29 22:13 public/index.html\n-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/first/index.html\n-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/index.html\n-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/second/index.html\n$\n\nThe new files are empty because because the templates used to generate the content are empty. The homepage doesn't show the new content, either. We have to update the templates to add the posts.\n\nList and Single Templates\n\nIn Hugo, we have three major kinds of templates. There's the home page template that we updated previously. It is used only by the home page. We also have \"single\" templates which are used to generate output for a single content file. We also have \"list\" templates that are used to group multiple pieces of content before generating output.\n\nGenerally speaking, list templates are named \"list.html\" and single templates are named \"single.html.\"\n\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\n\n Add Content to the Homepage\n\nThe home page will contain a list of posts. Let's update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n\n$ vi themes/zafta/layouts/index.html\n!DOCTYPE html\nhtml\nbody\n  {{ range first 10 .Data.Pages }}\n    h1{{ .Title }}/h1\n  {{ end }}\n/body\n/html\n:wq\n\n$\n\nHugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \"{{\" and \"}}\". In our template, the commands are:\n\nrange\n.Title\nend\n\nThe \"range\" command is an iterator. We're going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\n\nThe \".Title\" command prints the value of the \"title\" variable. Hugo pulls it from the front matter in the Markdown file.\n\nThe \"end\" command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \"end.\" Everything between the \"range\" and \"end\" is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\n\nIt's helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\n\nBuild the web site and then verify the results.\n\n$ rm -rf public\n$ hugo --verbose\nINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\nINFO: 2014/09/29 found taxonomies: map[string]string{\"tag\":\"tags\", \"category\":\"categories\"}\nWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\n0 draft content\n0 future content\n2 pages created\n0 tags created\n0 categories created\nin 4 ms\n$ find public -type f -name '*.html' | xargs ls -l\n-rw-r--r--  1 quoha  staff  94 Sep 29 22:23 public/index.html\n-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/first/index.html\n-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/index.html\n-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/second/index.html\n$ cat public/index.html\n!DOCTYPE html\nhtml\nbody\n\n    h1second/h1\n\n    h1first/h1\n\n/body\n/html\n$\n\nCongratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let's take a moment to appreciate what we've done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you've learned everything you need to know to build a theme. All that's really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\n\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don't worry, though, that's all to come.\n\nAdd Content to the Posts\n\nWe're working with posts, which are in the content/post/ directory. That means that their section is \"post\" (and if we don't do something weird, their type is also \"post\").\n\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can't find one, then it will look in the _default/ directory. There are some twists that we'll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\n\nNow that we know the search rule, let's see what we actually have available:\n\n$ find themes/zafta -name single.html | xargs ls -l\n-rw-r--r--  1 quoha  staff  132 Sep 29 17:31 themes/zafta/layouts/_default/single.html\n\nWe could create a new template, post/single.html, or change the default. Since we don't know of any other content types, let's start with updating the default.\n\nRemember, any content that we haven't created a template for will end up using this template. That can be good or bad. Bad because I know that we're going to be adding different types of content and we're going to end up undoing some of the changes we've made. It's good because we'll be able to see immediate results. It's also good to start here because we can start to build the basic layout for the site. As we add more content types, we'll refactor this file and move logic around. Hugo makes that fairly painless, so we'll accept the cost and proceed.\n\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you're building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That's a refreshing amount of joy right there.\n\n Update the Template File\n\n$ vi themes/zafta/layouts/_default/single.html\n!DOCTYPE html\nhtml\nhead\n  title{{ .Title }}/title\n/head\nbody\n  h1{{ .Title }}/h1\n  {{ .Content }}\n/body\n/html\n:wq\n\n$\n\nBuild the web site and verify the results.\n\n$ rm -rf public\n$ hugo --verbose\nINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\nINFO: 2014/09/29 found taxonomies: map[string]string{\"tag\":\"tags\", \"category\":\"categories\"}\nWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\n0 draft content\n0 future content\n2 pages created\n0 tags created\n0 categories created\nin 4 ms\n\n$ find public -type f -name '*.html' | xargs ls -l\n-rw-r--r--  1 quoha  staff   94 Sep 29 22:40 public/index.html\n-rw-r--r--  1 quoha  staff  125 Sep 29 22:40 public/post/first/index.html\n-rw-r--r--  1 quoha  staff    0 Sep 29 22:40 public/post/index.html\n-rw-r--r--  1 quoha  staff  128 Sep 29 22:40 public/post/second/index.html\n\n$ cat public/post/first/index.html\n!DOCTYPE html\nhtml\nhead\n  titlefirst/title\n/head\nbody\n  h1first/h1\n  pmy first post/p\n\n/body\n/html\n\n$ cat public/post/second/index.html\n!DOCTYPE html\nhtml\nhead\n  titlesecond/title\n/head\nbody\n  h1second/h1\n  pmy second post/p\n\n/body\n/html\n$\n\nNotice that the posts now have content. You can go to localhost:1313/post/first to verify.\n\nLinking to Content\n\nThe posts are on the home page. Let's add a link from there to the post. Since this is the home page, we'll update its template.\n\n$ vi themes/zafta/layouts/index.html\n!DOCTYPE html\nhtml\nbody\n  {{ range first 10 .Data.Pages }}\n    h1a href=\"{{ .Permalink }}\"{{ .Title }}/a/h1\n  {{ end }}\n/body\n/html\n\nBuild the web site and verify the results.\n\n$ rm -rf public\n$ hugo --verbose\nINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\nINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\nINFO: 2014/09/29 found taxonomies: map[string]string{\"tag\":\"tags\", \"category\":\"categories\"}\nWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\n0 draft content\n0 future content\n2 pages created\n0 tags created\n0 categories created\nin 4 ms\n\n$ find public -type f -name '*.html' | xargs ls -l\n-rw-r--r--  1 quoha  staff  149 Sep 29 22:44 public/index.html\n-rw-r--r--  1 quoha  staff  125 Sep 29 22:44 public/post/first/index.html\n-rw-r--r--  1 quoha  staff    0 Sep 29 22:44 public/post/index.html\n-rw-r--r--  1 quoha  staff  128 Sep 29 22:44 public/post/second/index.html\n\n$ cat public/index.html\n!DOCTYPE html\nhtml\nbody\n\n    h1a href=\"/post/second/\"second/a/h1\n\n    h1a href=\"/post/first/\"first/a/h1\n\n/body\n/html\n\n$\n\n Create a Post Listing\n\nWe have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let's make it show a list of all posts (not just the first ten).\n\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let's take a quick look and see which list templates are available.\n\n$ find themes/zafta -name list.html | xargs ls -l\n-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\n\nAs with the single post, we have to decide to update _default/list.html or create post/list.html. We still don't have multiple content types, so let's stay consistent and update the default list template.\n\nCreating Top Level Pages\n\nLet's add an \"about\" page and display it at the top level (as opposed to a sub-level like we did with posts).\n\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let's verify that by creating an \"about\" page at the top level:\n\n$ vi content/about.md\n+++\ntitle = \"about\"\ndescription = \"about this site\"\ndate = \"2014-09-27\"\nslug = \"about time\"\n+++\n\n about us\n\ni'm speechless\n:wq\n\nGenerate the web site and verify the results.\n\n$ find public -name '*.html' | xargs ls -l\n-rw-rw-r--  1 mdhender  staff   334 Sep 27 15:08 public/about-time/index.html\n-rw-rw-r--  1 mdhender  staff   527 Sep 27 15:08 public/index.html\n-rw-rw-r--  1 mdhender  staff   358 Sep 27 15:08 public/post/first-post/index.html\n-rw-rw-r--  1 mdhender  staff     0 Sep 27 15:08 public/post/index.html\n-rw-rw-r--  1 mdhender  staff   342 Sep 27 15:08 public/post/second-post/index.html\n\nNotice that the page wasn't created at the top level. It was created in a sub-directory named 'about-time/'. That name came from our slug. Hugo will use the slug to name the generated content. It's a reasonable default, by the way, but we can learn a few things by fighting it for this file.\n\nOne other thing. Take a look at the home page.\n\n$ cat public/index.html\n!DOCTYPE html\nhtml\nbody\n    h1a href=\"http://localhost:1313/post/theme/\"creating a new theme/a/h1\n    h1a href=\"http://localhost:1313/about-time/\"about/a/h1\n    h1a href=\"http://localhost:1313/post/second-post/\"second/a/h1\n    h1a href=\"http://localhost:1313/post/first-post/\"first/a/h1\nscriptdocument.write('<script src=\"http://'\n        (location.host || 'localhost').split(':')[0]\n        ':1313/livereload.js?mindelay=10\"</'\n        'script')/script/body\n/html\n\nNotice that the \"about\" link is listed with the posts? That's not desirable, so let's change that first.\n\n$ vi themes/zafta/layouts/index.html\n!DOCTYPE html\nhtml\nbody\n  h1posts/h1\n  {{ range first 10 .Data.Pages }}\n    {{ if eq .Type \"post\"}}\n      h2a href=\"{{ .Permalink }}\"{{ .Title }}/a/h2\n    {{ end }}\n  {{ end }}\n\n  h1pages/h1\n  {{ range .Data.Pages }}\n    {{ if eq .Type \"page\" }}\n      h2a href=\"{{ .Permalink }}\"{{ .Title }}/a/h2\n    {{ end }}\n  {{ end }}\n/body\n/html\n:wq\n\nGenerate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\n\nBut, that about page still renders to about-time/index.html.\n\n$ find public -name '*.html' | xargs ls -l\n-rw-rw-r--  1 mdhender  staff    334 Sep 27 15:33 public/about-time/index.html\n-rw-rw-r--  1 mdhender  staff    645 Sep 27 15:33 public/index.html\n-rw-rw-r--  1 mdhender  staff    358 Sep 27 15:33 public/post/first-post/index.html\n-rw-rw-r--  1 mdhender  staff      0 Sep 27 15:33 public/post/index.html\n-rw-rw-r--  1 mdhender  staff    342 Sep 27 15:33 public/post/second-post/index.html\n\nKnowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let's do it the hard way and change the permalink in the configuration file.\n\n$ vi config.toml\n[permalinks]\n  page = \"/:title/\"\n  about = \"/:filename/\"\n\nGenerate the web site and verify that this didn't work. Hugo lets \"slug\" or \"URL\" override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\n\nSharing Templates\n\nIf you've been following along, you probably noticed that posts have titles in the browser and the home page doesn't. That's because we didn't put the title in the home page's template (layouts/index.html). That's an easy thing to do, but let's look at a different option.\n\nWe can put the common bits into a shared template that's stored in the themes/zafta/layouts/partials/ directory.\n\n Create the Header and Footer Partials\n\nIn Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme's presentation.\n\n$ vi themes/zafta/layouts/partials/header.html\n!DOCTYPE html\nhtml\nhead\n  title{{ .Title }}/title\n/head\nbody\n:wq\n\n$ vi themes/zafta/layouts/partials/footer.html\n/body\n/html\n:wq\n\nUpdate the Home Page Template to Use the Partials\n\nThe most noticeable difference between a template call and a partials call is the lack of path:\n\n{{ template \"theme/partials/header.html\" . }}\nversus\n{{ partial \"header.html\" . }}\nBoth pass in the context.\n\nLet's change the home page template to use these new partials.\n\n$ vi themes/zafta/layouts/index.html\n{{ partial \"header.html\" . }}\n\n  h1posts/h1\n  {{ range first 10 .Data.Pages }}\n    {{ if eq .Type \"post\"}}\n      h2a href=\"{{ .Permalink }}\"{{ .Title }}/a/h2\n    {{ end }}\n  {{ end }}\n\n  h1pages/h1\n  {{ range .Data.Pages }}\n    {{ if or (eq .Type \"page\") (eq .Type \"about\") }}\n      h2a href=\"{{ .Permalink }}\"{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}/a/h2\n    {{ end }}\n  {{ end }}\n\n{{ partial \"footer.html\" . }}\n:wq\n\nGenerate the web site and verify the results. The title on the home page is now \"your title here\", which comes from the \"title\" variable in the config.toml file.\n\n Update the Default Single Template to Use the Partials\n\n$ vi themes/zafta/layouts/_default/single.html\n{{ partial \"header.html\" . }}\n\n  h1{{ .Title }}/h1\n  {{ .Content }}\n\n{{ partial \"footer.html\" . }}\n:wq\n\nGenerate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\n\nAdd “Date Published” to Posts\n\nIt's common to have posts display the date that they were written or published, so let's add that. The front matter of our posts has a variable named \"date.\" It's usually the date the content was created, but let's pretend that's the value we want to display.\n\n Add “Date Published” to the Template\n\nWe'll start by updating the template used to render the posts. The template code will look like:\n\n{{ .Date.Format \"Mon, Jan 2, 2006\" }}\n\nPosts use the default single template, so we'll change that file.\n\n$ vi themes/zafta/layouts/_default/single.html\n{{ partial \"header.html\" . }}\n\n  h1{{ .Title }}/h1\n  h2{{ .Date.Format \"Mon, Jan 2, 2006\" }}/h2\n  {{ .Content }}\n\n{{ partial \"footer.html\" . }}\n:wq\n\nGenerate the web site and verify the results. The posts now have the date displayed in them. There's a problem, though. The \"about\" page also has the date displayed.\n\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \"if\" statement like we did on the home page. Another way would be to create a separate template for posts.\n\nThe \"if\" solution works for sites that have just a couple of content types. It aligns with the principle of \"code for today,\" too.\n\nLet's assume, though, that we've made our site so complex that we feel we have to create a new template type. In Hugo-speak, we're going to create a section template.\n\nLet's restore the default single template before we forget.\n\n$ mkdir themes/zafta/layouts/post\n$ vi themes/zafta/layouts/_default/single.html\n{{ partial \"header.html\" . }}\n\n  h1{{ .Title }}/h1\n  {{ .Content }}\n\n{{ partial \"footer.html\" . }}\n:wq\n\nNow we'll update the post's version of the single template. If you remember Hugo's rules, the template engine will use this version over the default.\n\n$ vi themes/zafta/layouts/post/single.html\n{{ partial \"header.html\" . }}\n\n  h1{{ .Title }}/h1\n  h2{{ .Date.Format \"Mon, Jan 2, 2006\" }}/h2\n  {{ .Content }}\n\n{{ partial \"footer.html\" . }}\n:wq\n\nNote that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn't.\n\nDon't Repeat Yourself\n\nDRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you're figuring that out, accept that you'll be doing some refactoring. Hugo makes that easy and fast, so it's okay to delay splitting up a template.\n",
        "tags": []
    },
    {
        "uri": "/post/goisforlovers",
        "content": "---\ntitle: \"(Hu)go Template Primer\"\ndate: 2014-04-02\nthumbnail: \"images.svg\"\ntags:\n  \"golang\"\n  \"templates\"\n  \"themes\"\n  \"development\"\ncategories:\n  \"Development\"\n  \"golang\"\n---\n\nHugo uses the excellent Go html/template library for\nits template engine. It is an extremely lightweight engine that provides a very\nsmall amount of logic. In our experience that it is just the right amount of\nlogic to be able to create a good static website. If you have used other\ntemplate systems from different languages or frameworks you will find a lot of\nsimilarities in Go templates.\n\n!--more--\n\nThis document is a brief primer on using Go templates. The Go docs\nprovide more details.\n\nIntroduction to Go Templates\n\nGo templates provide an extremely simple template language. It adheres to the\nbelief that only the most basic of logic belongs in the template or view layer.\nOne consequence of this simplicity is that Go templates parse very quickly.\n\nA unique characteristic of Go templates is they are content aware. Variables and\ncontent will be sanitized depending on the context of where they are used. More\ndetails can be found in the Go docs.\n\n Basic Syntax\n\nGolang templates are HTML files with the addition of variables and\nfunctions.\n\nGo variables and functions are accessible within {{ }}\n\nAccessing a predefined variable \"foo\":\n\n    {{ foo }}\n\nParameters are separated using spaces\n\nCalling the add function with input of 1, 2:\n\n    {{ add 1 2 }}\n\nMethods and fields are accessed via dot notation\n\nAccessing the Page Parameter \"bar\"\n\n    {{ .Params.bar }}\n\nParentheses can be used to group items together\n\n    {{ if or (isset .Params \"alt\") (isset .Params \"caption\") }} Caption {{ end }}\n\nVariables\n\nEach Go template has a struct (object) made available to it. In hugo each\ntemplate is passed either a page or a node struct depending on which type of\npage you are rendering. More details are available on the\nvariables page.\n\nA variable is accessed by referencing the variable name.\n\n    title{{ .Title }}/title\n\nVariables can also be defined and referenced.\n\n    {{ $address := \"123 Main St.\"}}\n    {{ $address }}\n\n Functions\n\nGo template ship with a few functions which provide basic functionality. The Go\ntemplate system also provides a mechanism for applications to extend the\navailable functions with their own. [Hugo template\nfunctions](/layout/functions) provide some additional functionality we believe\nare useful for building websites. Functions are called by using their name\nfollowed by the required parameters separated by spaces. Template\nfunctions cannot be added without recompiling hugo.\n\nExample:\n\n    {{ add 1 2 }}\n\nIncludes\n\nWhen including another template you will pass to it the data it will be\nable to access. To pass along the current context please remember to\ninclude a trailing dot. The templates location will always be starting at\nthe /layout/ directory within Hugo.\n\nExample:\n\n    {{ template \"chrome/header.html\" . }}\n\n Logic\n\nGo templates provide the most basic iteration and conditional logic.\n\nIteration\n\nJust like in Go, the Go templates make heavy use of range to iterate over\na map, array or slice. The following are different examples of how to use\nrange.\n\nExample 1: Using Context\n\n    {{ range array }}\n        {{ . }}\n    {{ end }}\n\nExample 2: Declaring value variable name\n\n    {{range $element := array}}\n        {{ $element }}\n    {{ end }}\n\nExample 2: Declaring key and value variable name\n\n    {{range $index, $element := array}}\n        {{ $index }}\n        {{ $element }}\n    {{ end }}\n\n Conditionals\n\nIf, else, with, or, & and provide the framework for handling conditional\nlogic in Go Templates. Like range, each statement is closed with end.\n\nGo Templates treat the following values as false:\n\nfalse\n0\nany array, slice, map, or string of length zero\n\nExample 1: If\n\n    {{ if isset .Params \"title\" }}h4{{ index .Params \"title\" }}/h4{{ end }}\n\nExample 2: If - Else\n\n    {{ if isset .Params \"alt\" }}\n        {{ index .Params \"alt\" }}\n    {{else}}\n        {{ index .Params \"caption\" }}\n    {{ end }}\n\nExample 3: And & Or\n\n    {{ if and (or (isset .Params \"title\") (isset .Params \"caption\")) (isset .Params \"attr\")}}\n\nExample 4: With\n\nAn alternative way of writing \"if\" and then referencing the same value\nis to use \"with\" instead. With rebinds the context . within its scope,\nand skips the block if the variable is absent.\n\nThe first example above could be simplified as:\n\n    {{ with .Params.title }}h4{{ . }}/h4{{ end }}\n\nExample 5: If - Else If\n\n    {{ if isset .Params \"alt\" }}\n        {{ index .Params \"alt\" }}\n    {{ else if isset .Params \"caption\" }}\n        {{ index .Params \"caption\" }}\n    {{ end }}\n\nPipes\n\nOne of the most powerful components of Go templates is the ability to\nstack actions one after another. This is done by using pipes. Borrowed\nfrom unix pipes, the concept is simple, each pipeline's output becomes the\ninput of the following pipe.\n\nBecause of the very simple syntax of Go templates, the pipe is essential\nto being able to chain together function calls. One limitation of the\npipes is that they only can work with a single value and that value\nbecomes the last parameter of the next pipeline.\n\nA few simple examples should help convey how to use the pipe.\n\nExample 1 :\n\n    {{ if eq 1 1 }} Same {{ end }}\n\nis the same as\n\n    {{ eq 1 1 | if }} Same {{ end }}\n\nIt does look odd to place the if at the end, but it does provide a good\nillustration of how to use the pipes.\n\nExample 2 :\n\n    {{ index .Params \"disqus_url\" | html }}\n\nAccess the page parameter called \"disqus_url\" and escape the HTML.\n\nExample 3 :\n\n    {{ if or (or (isset .Params \"title\") (isset .Params \"caption\")) (isset .Params \"attr\")}}\n    Stuff Here\n    {{ end }}\n\nCould be rewritten as\n\n    {{  isset .Params \"caption\" | or isset .Params \"title\" | or isset .Params \"attr\" | if }}\n    Stuff Here\n    {{ end }}\n\n Context (aka. the dot)\n\nThe most easily overlooked concept to understand about Go templates is that {{ . }}\nalways refers to the current context. In the top level of your template this\nwill be the data set made available to it. Inside of a iteration it will have\nthe value of the current item. When inside of a loop the context has changed. .\nwill no longer refer to the data available to the entire page. If you need to\naccess this from within the loop you will likely want to set it to a variable\ninstead of depending on the context.\n\nExample:\n\n      {{ $title := .Site.Title }}\n      {{ range .Params.tags }}\n        li a href=\"{{ $baseurl }}/tags/{{ . | urlize }}\"{{ . }}/a - {{ $title }} /li\n      {{ end }}\n\nNotice how once we have entered the loop the value of {{ . }} has changed. We\nhave defined a variable outside of the loop so we have access to it from within\nthe loop.\n\nHugo Parameters\n\nHugo provides the option of passing values to the template language\nthrough the site configuration (for sitewide values), or through the meta\ndata of each specific piece of content. You can define any values of any\ntype (supported by your front matter/config format) and use them however\nyou want to inside of your templates.\n\n Using Content (page) Parameters\n\nIn each piece of content you can provide variables to be used by the\ntemplates. This happens in the front matter.\n\nAn example of this is used in this documentation site. Most of the pages\nbenefit from having the table of contents provided. Sometimes the TOC just\ndoesn't make a lot of sense. We've defined a variable in our front matter\nof some pages to turn off the TOC from being displayed.\n\nHere is the example front matter:\n\n---\ntitle: \"Permalinks\"\ndate: \"2013-11-18\"\naliases:\n  \"/doc/permalinks/\"\ngroups: [\"extras\"]\ngroups_weight: 30\nnotoc: true\n---\n\nHere is the corresponding code inside of the template:\n\n      {{ if not .Params.notoc }}\n        div id=\"toc\" class=\"well col-md-4 col-sm-6\"\n        {{ .TableOfContents }}\n        /div\n      {{ end }}\n\nUsing Site (config) Parameters\nIn your top-level configuration file (eg, config.yaml) you can define site\nparameters, which are values which will be available to you in chrome.\n\nFor instance, you might declare:\n\nparams:\n  CopyrightHTML: \"Copyright &xA9; 2013 John Doe. All Rights Reserved.\"\n  TwitterUser: \"spf13\"\n  SidebarRecentLimit: 5\n\nWithin a footer layout, you might then declare a footer which is only\nprovided if the CopyrightHTML parameter is provided, and if it is given,\nyou would declare it to be HTML-safe, so that the HTML entity is not escaped\nagain.  This would let you easily update just your top-level config file each\nJanuary 1st, instead of hunting through your templates.\n\n{{if .Site.Params.CopyrightHTML}}footer\ndiv class=\"text-center\"{{.Site.Params.CopyrightHTML | safeHtml}}/div\n/footer{{end}}\n\nAn alternative way of writing the \"if\" and then referencing the same value\nis to use \"with\" instead. With rebinds the context . within its scope,\nand skips the block if the variable is absent:\n\n{{with .Site.Params.TwitterUser}}span class=\"twitter\"\na href=\"https://twitter.com/{{.}}\" rel=\"author\"\n<img src=\"/images/twitter.png\" width=\"48\" height=\"48\" title=\"Twitter: {{.}}\"\nalt=\"Twitter\"/a\n/span{{end}}\n\nFinally, if you want to pull \"magic constants\" out of your layouts, you can do\nso, such as in this example:\n\nnav class=\"recent\"\n  h1Recent Posts/h1\n  ul{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}\n    lia href=\"{{.RelPermalink}}\"{{.Title}}/a/li\n  {{end}}/ul\n/nav\n\n[go]: https://golang.org/\n[gohtmltemplate]: https://golang.org/pkg/html/template/\n",
        "tags": []
    },
    {
        "uri": "/post/hugoisforlovers",
        "content": "---\ntitle: Getting Started with Hugo\ndate: 2014-04-02\ntags:\n  \"golang\"\n  \"hugo\"\n  \"development\"\ncategories:\n  \"dev\"\n---\n\nStep 1. Install Hugo\n\nGo to Hugo releases and download the\nappropriate version for your OS and architecture.\n\nSave it somewhere specific as we will be using it in the next step.\n\nMore complete instructions are available at Install Hugo\n\n Step 2. Build the Docs\n\nHugo has its own example site which happens to also be the documentation site\nyou are reading right now.\n\nFollow the following steps:\n\nClone the Hugo repository\nGo into the repo\nRun hugo in server mode and build the docs\nOpen your browser to http://localhost:1313\n\nCorresponding pseudo commands:\n\n    git clone https://github.com/spf13/hugo\n    cd hugo\n    /path/to/where/you/installed/hugo server --source=./docs\n     29 pages created\n     0 tags index created\n     in 27 ms\n     Web Server is available at http://localhost:1313\n     Press ctrl+c to stop\n\nOnce you've gotten here, follow along the rest of this page on your local build.\n\nStep 3. Change the docs site\n\nStop the Hugo process by hitting Ctrl+C.\n\nNow we are going to run hugo again, but this time with hugo in watch mode.\n\n    /path/to/hugo/from/step/1/hugo server --source=./docs --watch\n     29 pages created\n     0 tags index created\n     in 27 ms\n     Web Server is available at http://localhost:1313\n     Watching for changes in /Users/spf13/Code/hugo/docs/content\n     Press ctrl+c to stop\n\nOpen your favorite editor and change one of the source\ncontent pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\n\nContent files are found in docs/content/. Unless otherwise specified, files\nare located at the same relative location as the url, in our case\ndocs/content/overview/quickstart.md.\n\nChange and save this file.. Notice what happened in your terminal.\n\n     Change detected, rebuilding site\n\n     29 pages created\n     0 tags index created\n     in 26 ms\n\nRefresh the browser and observe that the typo is now fixed.\n\nNotice how quick that was. Try to refresh the site before it's finished building. I double dare you.\nHaving nearly instant feedback enables you to have your creativity flow without waiting for long builds.\n\n Step 4. Have fun\n\nThe best way to learn something is to play with it.\n",
        "tags": []
    },
    {
        "uri": "/post/kotlin training",
        "content": "---\ntitle: \"Kotlin Training\"\ndate: 2020-05-04T21:28:55+01:00\ncategories:\n  \"Training\"\ntags: [\"Kotlin\"]\ntraining_types: [\"Programming languages\"]\n---\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n",
        "tags": []
    },
    {
        "uri": "/post/refactoring-2nd-edition",
        "content": "---\ntitle: \"Refactoring 2nd Edition\"\ndate: 2020-05-05T20:57:32+01:00\ncategories: [\"Communities\"]\ntags: [\"Refactoring\"]\n---\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\n!--more--\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n",
        "tags": []
    },
    {
        "uri": "/post/testing training",
        "content": "---\ntitle: \"Training about testing\"\ndate: 2020-05-05T20:57:32+01:00\ncategories: [\"Training\",\"QA\"]\ntags: [\"QA\"]\ntraining_types: [\"Testing\"]\n---\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n\n!--more--\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n",
        "tags": []
    },
    {
        "uri": "/post/training about GCP",
        "content": "---\ntitle: \"GCP Training\"\ndate: 2020-05-05T20:57:32+01:00\ncategories: [\"Training\"]\ntags: [\"GCP\"]\ntraining_types: [\"Cloud Platforms\"]\n---\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborumLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\n",
        "tags": []
    },
    {
        "uri": "/training_types/_index",
        "content": "---\ntitle: Training\ndate: 2014-04-09\nauthorbox: false\nsidebar: false\nmenu: \n  main:\n    weight: 50\n---",
        "tags": []
    }
]